{"uid":"164be81737768b81","name":"Login with correct email and password","fullName":"tests.authentication.test_authentication.TestAuthentication#test_login","historyId":"b6b2aaa730ad45068d1fca8abf4a80e6","time":{"start":1758709201799,"stop":1758709202076,"duration":277},"status":"failed","statusMessage":"AssertionError: Incorrect response status code. Expected status code: 404 Actual status code: 200","statusTrace":"self = <tests.authentication.test_authentication.TestAuthentication object at 0x7f2a3d430a50>\nfunction_user = UserFixture(request=CreateUserRequestSchema(email='joanna91@example.com', password='k0%JGvWr#@', last_name='Russell', ...ae-a371-c93abf98f37d', email='joanna91@example.com', last_name='Russell', first_name='Jason', middle_name='Michelle')))\nauthentication_client = <clients.authentication.authentication_client.AuthenticationClient object at 0x7f2a3f2212b0>\n\n    @allure.story(AllureStory.LOGIN)\n    @allure.sub_suite(AllureStory.LOGIN)\n    @allure.severity(Severity.BLOCKER)\n    @allure.title(\"Login with correct email and password\")\n    def test_login(\n            self,\n            function_user: UserFixture,\n            authentication_client: AuthenticationClient\n    ):\n        # Формируем тело запроса на аутентификацию\n        request = LoginRequestSchema(\n            email=function_user.email,\n            password=function_user.password\n        )\n        # Отправляем запрос на аутентификацию\n        response = authentication_client.login_api(request)\n        # Инициализируем модель ответа на основе полученного JSON в ответе\n        response_data = LoginResponseSchema.model_validate_json(response.text)\n    \n        # Выполняем проверку статус-кода\n>       assert_status_code(response.status_code, HTTPStatus.NOT_FOUND)\n\ntests/authentication/test_authentication.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nactual = 200, expected = <HTTPStatus.NOT_FOUND: 404>\n\n    @allure.step(\"Check that response status code equals to {expected}\")\n    def assert_status_code(actual: int, expected: int):\n        \"\"\"\n        Проверяет, что фактический статус-код ответа соответствует ожидаемому\n    \n        :param actual: Фактический статус-код\n        :param expected: Ожидаемый статус-код\n        :raises AssertionError: Если статус-коды не совпадают\n        \"\"\"\n        logger.info(f\"Check that response status code equals to {expected}\")\n    \n>       assert actual == expected, (\n               ^^^^^^^^^^^^^^^^^^\n            f'Incorrect response status code. '\n            f'Expected status code: {expected} '\n            f'Actual status code: {actual}'\n        )\nE       AssertionError: Incorrect response status code. Expected status code: 404 Actual status code: 200\n\ntools/assertions/base.py:21: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1758709201407,"stop":1758709201408,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"save_allure_environment_file","time":{"start":1758709201408,"stop":1758709201408,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"public_users_client","time":{"start":1758709201408,"stop":1758709201452,"duration":44},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"function_user","time":{"start":1758709201453,"stop":1758709201776,"duration":323},"status":"passed","steps":[{"name":"Create user","time":{"start":1758709201453,"stop":1758709201772,"duration":319},"status":"passed","steps":[{"name":"Make POST request to '/api/v1/users'","time":{"start":1758709201453,"stop":1758709201772,"duration":319},"status":"passed","steps":[],"attachments":[{"uid":"3283bed1c21b49db","name":"cURL command","source":"3283bed1c21b49db.txt","type":"text/plain","size":419}],"parameters":[{"name":"url","value":"'/api/v1/users'"},{"name":"json","value":"{'email': 'joanna91@example.com', 'password': 'k0%JGvWr#@', 'lastName': 'Russell', 'firstName': 'Jason', 'middleName': 'Michelle'}"},{"name":"data","value":"None"},{"name":"files","value":"None"}],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"request","value":"CreateUserRequestSchema(email='joanna91@example.com', password='k0%JGvWr#@', last_name='Russell', first_name='Jason', middle_name='Michelle')"}],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":2,"shouldDisplayMessage":false,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"authentication_client","time":{"start":1758709201776,"stop":1758709201798,"duration":22},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Incorrect response status code. Expected status code: 404 Actual status code: 200","statusTrace":"self = <tests.authentication.test_authentication.TestAuthentication object at 0x7f2a3d430a50>\nfunction_user = UserFixture(request=CreateUserRequestSchema(email='joanna91@example.com', password='k0%JGvWr#@', last_name='Russell', ...ae-a371-c93abf98f37d', email='joanna91@example.com', last_name='Russell', first_name='Jason', middle_name='Michelle')))\nauthentication_client = <clients.authentication.authentication_client.AuthenticationClient object at 0x7f2a3f2212b0>\n\n    @allure.story(AllureStory.LOGIN)\n    @allure.sub_suite(AllureStory.LOGIN)\n    @allure.severity(Severity.BLOCKER)\n    @allure.title(\"Login with correct email and password\")\n    def test_login(\n            self,\n            function_user: UserFixture,\n            authentication_client: AuthenticationClient\n    ):\n        # Формируем тело запроса на аутентификацию\n        request = LoginRequestSchema(\n            email=function_user.email,\n            password=function_user.password\n        )\n        # Отправляем запрос на аутентификацию\n        response = authentication_client.login_api(request)\n        # Инициализируем модель ответа на основе полученного JSON в ответе\n        response_data = LoginResponseSchema.model_validate_json(response.text)\n    \n        # Выполняем проверку статус-кода\n>       assert_status_code(response.status_code, HTTPStatus.NOT_FOUND)\n\ntests/authentication/test_authentication.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nactual = 200, expected = <HTTPStatus.NOT_FOUND: 404>\n\n    @allure.step(\"Check that response status code equals to {expected}\")\n    def assert_status_code(actual: int, expected: int):\n        \"\"\"\n        Проверяет, что фактический статус-код ответа соответствует ожидаемому\n    \n        :param actual: Фактический статус-код\n        :param expected: Ожидаемый статус-код\n        :raises AssertionError: Если статус-коды не совпадают\n        \"\"\"\n        logger.info(f\"Check that response status code equals to {expected}\")\n    \n>       assert actual == expected, (\n               ^^^^^^^^^^^^^^^^^^\n            f'Incorrect response status code. '\n            f'Expected status code: {expected} '\n            f'Actual status code: {actual}'\n        )\nE       AssertionError: Incorrect response status code. Expected status code: 404 Actual status code: 200\n\ntools/assertions/base.py:21: AssertionError","steps":[{"name":"Authenticate user","time":{"start":1758709201799,"stop":1758709202075,"duration":276},"status":"passed","steps":[{"name":"Make POST request to '/api/v1/authentication/login'","time":{"start":1758709201799,"stop":1758709202075,"duration":276},"status":"passed","steps":[],"attachments":[{"uid":"a65a3243d388d5f7","name":"cURL command","source":"a65a3243d388d5f7.txt","type":"text/plain","size":368}],"parameters":[{"name":"url","value":"'/api/v1/authentication/login'"},{"name":"json","value":"{'email': 'joanna91@example.com', 'password': 'k0%JGvWr#@'}"},{"name":"data","value":"None"},{"name":"files","value":"None"}],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"request","value":"LoginRequestSchema(email='joanna91@example.com', password='k0%JGvWr#@')"}],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"Check that response status code equals to <HTTPStatus.NOT_FOUND: 404>","time":{"start":1758709202075,"stop":1758709202075,"duration":0},"status":"failed","statusMessage":"AssertionError: Incorrect response status code. Expected status code: 404 Actual status code: 200\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.13.6/x64/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/autotests-api/autotests-api/tools/assertions/base.py\", line 21, in assert_status_code\n    assert actual == expected, (\n           ^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[{"name":"actual","value":"200"},{"name":"expected","value":"<HTTPStatus.NOT_FOUND: 404>"}],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"67cd004f398b3a76","name":"log","source":"67cd004f398b3a76.txt","type":"text/plain","size":499}],"parameters":[],"stepsCount":3,"shouldDisplayMessage":true,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"save_allure_environment_file::0","time":{"start":1758709213528,"stop":1758709213529,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"AUTHENTICATION"},{"name":"parentSuite","value":"LMS service"},{"name":"feature","value":"Authentication"},{"name":"epic","value":"LMS service"},{"name":"severity","value":"blocker"},{"name":"subSuite","value":"Login"},{"name":"suite","value":"Authentication"},{"name":"story","value":"Login"},{"name":"tag","value":"REGRESSION"},{"name":"tag","value":"regression"},{"name":"tag","value":"authentication"},{"name":"host","value":"runnervmf4ws1"},{"name":"thread","value":"2350-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.authentication.test_authentication"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":3,"unknown":0,"total":4},"items":[{"uid":"be52abba3e64303","reportUrl":"https://ifanton.github.io/autotests-api/3/#testresult/be52abba3e64303","status":"passed","time":{"start":1758639632212,"stop":1758639632765,"duration":553}},{"uid":"c1a45d85ab5d934f","reportUrl":"https://ifanton.github.io/autotests-api/2/#testresult/c1a45d85ab5d934f","status":"passed","time":{"start":1758630839352,"stop":1758630839900,"duration":548}},{"uid":"63e39fd7b50171b6","reportUrl":"https://ifanton.github.io/autotests-api/1/#testresult/63e39fd7b50171b6","status":"passed","time":{"start":1758630405817,"stop":1758630406102,"duration":285}}]},"tags":["REGRESSION","AUTHENTICATION","regression","authentication"]},"source":"164be81737768b81.json","parameterValues":[]}